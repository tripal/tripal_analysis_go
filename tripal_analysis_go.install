<?php
/**
 * @file
 *
 * Tripal Analysis GO Module
 */

/**
 *  Implementation of hook_install();
 */
function tripal_analysis_go_install(){

   // For Tripal v2 backwards compatibility, register this
   // module as an analysis.
   if (module_exists('tripal_analysis')) {
    tripal_register_analysis_child('tripal_analysis_go');
   }

   // Add cvterms.
   tripal_analysis_go_add_cvterms();

   // Add the materialized views.
   tripal_analysis_go_add_mviews();
}

/**
 * Adds materialized views for this module.
 */
function tripal_analysis_go_add_mviews() {
  $view_name = 'go_count_analysis';
  $comment = t('This view is for counting features assigned to GO terms by a particular analysis.');

  // Drop the MView table if it exists
  $mview_id = tripal_get_mview_id($view_name);
  if ($mview_id) {
    tripal_delete_mview($mview_id);
  }

  $sql = "
    SELECT T1.cvname,T1.cvterm_id,T1.analysis_id,T1.organism_id,count(*) as feature_count
    FROM
    (SELECT DISTINCT AF.analysis_id, AF.feature_id,CVT.name as cvname,
       CVT.cvterm_id,CVTP.object_id,CV.name, F.organism_id
     FROM {analysisfeatureprop} AFP
       INNER JOIN {analysisfeature} AF ON AF.analysisfeature_id = AFP.analysisfeature_id
       INNER JOIN {feature} F          ON AF.feature_id = F.feature_id
       INNER JOIN {cvtermpath} CVTP    ON CVTP.subject_id = AFP.type_id
       INNER JOIN {cvterm} CVT         ON CVTP.object_id = CVT.cvterm_id
       INNER JOIN {cv} CV                 ON CV.cv_id = CVT.cv_id

     WHERE
       (CV.name = 'biological_process' or
        CV.name = 'molecular_function' or
        CV.name = 'cellular_component')) as T1
    GROUP BY T1.cvname,T1.cvterm_id,T1.analysis_id,T1.organism_id
  ";

  $schema = array(
    'table' => $view_name,
    'description' => $comment,
    'fields' => array(
      'cvname' => array(
        'type' => 'varchar',
        'length' => 255,
      ),
      'cvterm_id' => array(
        'type' => 'int',
        'not null' => TRUE,
      ),
      'analysis_id' => array(
        'type' => 'int',
        'not null' => TRUE,
      ),
      'organism_id' => array(
        'type' => 'int',
        'not null' => TRUE,
      ),
      'feature_count' => array(
        'type' => 'int',
        'not null' => TRUE,
      ),
    ),
    'indexes' => array(
      $view_name . '_indx0' => array('cvterm_id', 'organism_id', 'analysis_id'),
    ),
    'foreign keys' => array(
      'cvterm' => array(
        'table' => 'cvterm',
        'columns' => array(
          'cvterm_id' => 'cvterm_id',
        ),
      ),
      'organism' => array(
        'table' => 'organism',
        'columns' => array(
          'organism_id' => 'organism_id',
        ),
      ),
      'analysis' => array(
        'table' => 'analysis',
        'columns' => array(
          'analysis_id' => 'analysis_id',
        ),
      ),
    ),
  );
  $redirect = FALSE;
  tripal_add_mview($view_name, 'tripal_analysis_go', $schema, $sql, $comment, $redirect);
}

/*******************************************************************************
 * Function for adding cvterms
 */
function tripal_analysis_go_add_cvterms() {

   // Add the cvterms for the analysisprop table
  tripal_insert_cvterm(array(
    'name' => 'analysis_go_gaf_file',
    'def' => 'The input file or directory that contains the GAF content',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ));
 tripal_insert_cvterm(array(
   'name' => 'analysis_go_gaf_file_ext',
   'def' => 'Extension of the GAF files',
   'cv_name' => 'tripal',
   'db_name' => 'tripal',
 ));
  tripal_insert_cvterm(array(
    'name' => 'analysis_go_seq_type',
    'def' => 'The feature type (e.g. mRNA, polypeptide) of the query input file. This type is used to identify the query feature when multiple features have the same name',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ));
  tripal_insert_cvterm(array(
    'name' => 'analysis_go_query_uniquename',
    'def' => 'Indicates if the matched name in the query definition line of the GAF file is feature uniquename',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ));
  tripal_insert_cvterm(array(
    'name' => 'analysis_go_method',
    'def' => 'The method of GO loading (add/replace/remove)',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ));
  tripal_insert_cvterm(array(
    'name' => 'analysis_go_re_name',
    'def' => 'Regular expression for the name',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ));
  tripal_insert_cvterm(array(
    'name' => 'analysis_go_gojob',
    'def' => 'Execute a job or not',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ));
}

/**
 * Implements hook_uninstall()
 */
function tripal_analysis_go_uninstall(){

  // Remove materialized views
  $mview = tripal_get_mview_id('go_count_analysis');
  if ($mview) {
    tripal_delete_mview($mview_id);
  }

  // For Tripal v2 backwards compatibility, un register this
  // module as an analysis.
  if (module_exists('tripal_analysis')) {
    tripal_unregister_analysis_child('tripal_analysis_go');
  }
}

/**
 * Implements hook_requirements
 */
function tripal_analysis_go_requirements($phase) {
  $requirements = array();
  if ($phase == 'install') {
    // make sure chado is installed
    if (!$GLOBALS["chado_is_installed"]) {
      $requirements ['tripal_analysis_go'] = array(
          'title' => "tripal_analysis_go",
          'value' => "ERROR: Chado must be installed before this module can be enabled",
          'severity' => REQUIREMENT_ERROR,
      );
    }
  }
  return $requirements;
}
